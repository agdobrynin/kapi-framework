#!/usr/bin/env php
<?php
/**
 * Консольная командная утилита для миграций
 */

require __DIR__ . '/../../../autoload.php';

use splitbrain\phpcli\CLI;
use splitbrain\phpcli\Exception;
use splitbrain\phpcli\Options;
use splitbrain\phpcli\Colors;
use splitbrain\phpcli\TableFormatter;
use Kaspi\Migration\ConsoleAction;
use Kaspi\Config;

class KaspiMigrate extends CLI
{
    private $migrationConsole;

    protected function setup(Options $options)
    {
        $options->setHelp('Kaspi framework migration tool');

        $options->registerOption(
            'config',
            'Application config. Default load config.php in current directory',
            'c',
            'filename'
        );

        $options->registerCommand('init', 'Init migration tool. Check DB connection, make migration folder.');

        $options->registerCommand('status', 'Show all migration statuses');

        $options->registerCommand('create', 'Create new migration');
        $options->registerArgument('name', 'Migration name', true, 'create');

        $options->registerCommand('up', 'Run migration');
        $options->registerArgument('version', 'Migrate to version, including it.', false, 'up');

        $options->registerCommand('down', 'Rollback migration');
        $options->registerArgument('version', 'Rollback migration to version, including it', true, 'down');

        $options->registerCommand('clearall', 'Clear all data from migration');
    }

    protected function showMigrations(array $migrationTable)
    {
        $tf = new TableFormatter($this->colors);
        $tf->setBorder(' | ');
        $colWidth = array('20%', '*', '35%', '10%');
        // show a header
        $result = PHP_EOL . PHP_EOL . $tf->format(
                $colWidth,
                array('Version', 'Name', 'Updated', 'Status')
            );
        // a line across the whole width
        $result .= str_pad('', $tf->getMaxWidth(), '-') . "\n";
        foreach ($migrationTable as $row) {
            $result .= $tf->format(
                $colWidth,
                array(
                    $row['version'],
                    $row['name'],
                    $row['update_at'],
                    $row['status'] ? 'UP' : 'DOWN'
                ),
                array(Colors::C_CYAN, Colors::C_YELLOW, Colors::C_LIGHTCYAN, $row['status'] ? Colors::C_GREEN : Colors::C_RED)
            );
            $result .= str_pad('', $tf->getMaxWidth(), '-') . PHP_EOL;
        }
        return $result;
    }

    protected function getConfig(Options $options): array
    {
        if ($options->getOpt('config')) {
            if (is_file($config = $options->getOpt('config'))) {
                return require $config;
            }
        } elseif (is_file('config.php')) {
            return require 'config.php';
        }
        $this->info('Use option --config path/to/config-file.php for loading application config');
        throw new Exception('Config file not found. Default find config.php in current directory.');
    }

    protected function main(Options $options)
    {
        if (empty($options->getCmd())) {
            $this->error('No known command was called, we show the default help instead:');
            echo $options->help();
            exit;
        }

        $config = new Config($this->getConfig($options));
        $this->migrationConsole = new ConsoleAction($config, $this);

        switch ($options->getCmd()) {
            case 'init':
                $this->migrationConsole->init();
                break;
            case 'status':
                print $this->showMigrations($this->migrationConsole->status() ?? []);
                break;
            case 'create':
                $this->migrationConsole->create($options->getArgs()[0]);
                break;
            case 'up':
                $migrationVersion = $options->getArgs()[0] ?? null;
                $this->migrationConsole->up($migrationVersion);
                break;
            case 'down':
                $migrationVersion = $options->getArgs()[0] ?? null;
                $this->migrationConsole->down($migrationVersion);
                break;
            case 'clearall':
                $this->alert('Command clearall not realized yet');
                break;
            default:
                $this->error('No known command was called, we show the default help instead:');
                echo $options->help();
                exit;
        }
    }
}

$cli = new KaspiMigrate();
$cli->run();
